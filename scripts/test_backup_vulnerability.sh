#!/bin/bash

# MongoDB Backup Test Script
# This script tests the backup functionality and demonstrates the security vulnerability

echo "=== MongoDB Backup Security Test ==="
echo "This script demonstrates how MongoDB backups are exposed publicly"
echo ""

# Get outputs from Terraform
echo "1. Getting Terraform outputs..."
BACKUP_STORAGE_ACCOUNT=$(terraform -chdir=terraform output -raw backup_storage_account_name 2>/dev/null)
BACKUP_CONTAINER_URL=$(terraform -chdir=terraform output -raw backup_container_url 2>/dev/null)
MONGODB_VM_IP=$(terraform -chdir=terraform output -raw mongodb_vm_public_ip 2>/dev/null)

if [ -z "$BACKUP_STORAGE_ACCOUNT" ]; then
    echo "ERROR: Could not get Terraform outputs. Make sure you've run 'terraform apply' first."
    exit 1
fi

echo "   Storage Account: $BACKUP_STORAGE_ACCOUNT"
echo "   Container URL: $BACKUP_CONTAINER_URL"
echo "   MongoDB VM IP: $MONGODB_VM_IP"
echo ""

# Test 1: Manual backup trigger
echo "2. Testing manual backup trigger..."
echo "   Connecting to MongoDB VM and running backup..."

ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 azureuser@$MONGODB_VM_IP \
    "export AZURE_STORAGE_ACCOUNT=$BACKUP_STORAGE_ACCOUNT && /home/azureuser/scripts/mongodb_backup.sh" \
    2>/dev/null

if [ $? -eq 0 ]; then
    echo "   âœ“ Manual backup completed successfully"
else
    echo "   âš  Manual backup may have failed (check VM logs)"
fi
echo ""

# Test 2: List public backups (demonstrate vulnerability)
echo "3. Testing public access to backups (SECURITY VULNERABILITY)..."
echo "   Attempting to list backup files anonymously..."

# Try to list blobs using public access
BACKUP_LIST=$(curl -s "${BACKUP_CONTAINER_URL}?restype=container&comp=list")

if echo "$BACKUP_LIST" | grep -q "mongodb-backup"; then
    echo "   ðŸš¨ CRITICAL VULNERABILITY: Backup files are publicly accessible!"
    echo "   ðŸš¨ Anyone can list and download your database backups!"
    echo ""
    echo "   Public backup files found:"
    echo "$BACKUP_LIST" | grep -o 'mongodb-backup-[^<]*\.tar\.gz' | head -5
else
    echo "   âš  No backup files found yet, or container not yet public"
fi
echo ""

# Test 3: Download vulnerability demonstration
echo "4. Demonstrating backup download vulnerability..."
echo "   Anyone can download backups with a simple curl command:"
echo ""
echo "   Example commands an attacker could use:"
echo "   curl '${BACKUP_CONTAINER_URL}?restype=container&comp=list' | grep mongodb-backup"
echo "   curl '${BACKUP_CONTAINER_URL}/mongodb-backup-YYYY-MM-DD-HHMMSS.tar.gz' -o stolen_backup.tar.gz"
echo ""

# Test 4: Check cron job
echo "5. Checking automated backup schedule..."
ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 azureuser@$MONGODB_VM_IP \
    "crontab -l 2>/dev/null | grep mongodb_backup" 2>/dev/null

if [ $? -eq 0 ]; then
    echo "   âœ“ Automated backup cron job is configured"
    echo "   âœ“ Backups will run daily at 2:00 AM UTC"
else
    echo "   âš  Automated backup may not be configured"
fi
echo ""

# Test 5: Security recommendations
echo "6. Security Issues Identified:"
echo "   ðŸš¨ PUBLIC BLOB CONTAINER: Anyone can list and download backups"
echo "   ðŸš¨ NO ENCRYPTION: Backups are stored without additional encryption"
echo "   ðŸš¨ NO ACCESS CONTROLS: No IP restrictions or authentication required"
echo "   ðŸš¨ SENSITIVE DATA EXPOSURE: Database contents available to attackers"
echo "   ðŸš¨ COMPLIANCE VIOLATIONS: Public storage of potentially sensitive data"
echo ""

echo "7. How to exploit this vulnerability:"
echo "   - Navigate to: $BACKUP_CONTAINER_URL"
echo "   - List all backup files publicly"
echo "   - Download any backup file without authentication"
echo "   - Extract database contents: tar -xzf mongodb-backup-*.tar.gz"
echo "   - Access all database records, user data, and configurations"
echo ""

echo "=== Test Complete ==="
echo "This demonstrates a CRITICAL security vulnerability in cloud storage configuration."
