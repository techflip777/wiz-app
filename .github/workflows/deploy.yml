name: Deploy to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

env:
  AKS_CLUSTER_NAME: wiz-aks-cluster
  RESOURCE_GROUP: wiz-exercise-rg
  CONTAINER_APP_NAME: wiz-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get ACR Name and Credentials
      id: get-acr
      run: |
        # Get ACR name
        ACR_NAME=$(az acr list --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].name" -o tsv)
        echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
        echo "Found ACR: $ACR_NAME"
        
        # Get ACR credentials
        ACR_CREDS=$(az acr credential show --name $ACR_NAME)
        ACR_USERNAME=$(echo $ACR_CREDS | jq -r '.username')
        ACR_PASSWORD=$(echo $ACR_CREDS | jq -r '.passwords[0].value')
        
        # Set credentials as environment variables
        echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
        echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}

    - name: Build and push container image
      run: |
        # Build the image with both latest and commit SHA tags
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:${{ github.sha }} \
                    -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:latest .
        
        # Push both tags
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:latest

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

    - name: Create Kubernetes namespace if not exists
      run: |
        kubectl create namespace wiz-app --dry-run=client -o yaml | kubectl apply -f -

    - name: Create MongoDB connection string secret
      run: |
        kubectl create secret generic mongodb-connection \
          --namespace wiz-app \
          --from-literal=connection-string="${{ secrets.MONGODB_CONNECTION_STRING }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      run: |
        # Update the deployment with the new image
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: wiz-app
          namespace: wiz-app
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: wiz-app
          template:
            metadata:
              labels:
                app: wiz-app
            spec:
              containers:
              - name: wiz-app
                image: $ACR_LOGIN_SERVER/wiz-app:c9d51f112de9bdf87babd6ba005b197a19720f60
                ports:
                - containerPort: 8081
                env:
                - name: MONGODB_URI
                  valueFrom:
                    secretKeyRef:
                      name: mongodb-connection
                      key: connection-string
                - name: SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: app-secrets
                      key: SECRET_KEY
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8081
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  periodSeconds: 30
                  failureThreshold: 3
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 8081
                  initialDelaySeconds: 30
                  timeoutSeconds: 5
                  periodSeconds: 20
                  failureThreshold: 3
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: ${{ env.CONTAINER_APP_NAME }}
          namespace: wiz-app
        spec:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 8081
          selector:
            app: ${{ env.CONTAINER_APP_NAME }}
        EOF

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for deployment to complete..."
        if ! kubectl rollout status deployment/${{ env.CONTAINER_APP_NAME }} -n wiz-app --timeout=600s; then
          echo "Deployment failed. Checking pod status..."
          kubectl get pods -n wiz-app
          echo "Checking pod logs..."
          kubectl logs -n wiz-app -l app=${{ env.CONTAINER_APP_NAME }}
          echo "Checking pod events..."
          kubectl get events -n wiz-app --sort-by='.lastTimestamp'
          echo "Checking deployment details..."
          kubectl describe deployment ${{ env.CONTAINER_APP_NAME }} -n wiz-app
          exit 1
        fi

    - name: Get service URL
      run: |
        echo "Waiting for LoadBalancer IP..."
        sleep 60
        SERVICE_IP=$(kubectl get service ${{ env.CONTAINER_APP_NAME }} -n wiz-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Application is available at: http://$SERVICE_IP"